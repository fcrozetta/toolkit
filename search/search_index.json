{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This toolkit is a collection of applicaions that were developed based on my daily needs. For this reason, the main target of the applications is MacOs. Other systems may be added based on need and/or request. To request, open an issue in the respective application github.</p> <p>All the tools should have a build process and be packaged in a release. In the future, maybe some tools can be released as libraries to be installed, or docker images. </p>"},{"location":"_tags/","title":"Index","text":"<p>Applications, by Tags</p>"},{"location":"_tags/#tag:beta","title":"beta","text":"<ul> <li>            Fc json          </li> </ul>"},{"location":"_tags/#tag:cpp","title":"cpp","text":"<ul> <li>            Fc json          </li> </ul>"},{"location":"_tags/#tag:csharp","title":"csharp","text":"<ul> <li>            Fc.tui core          </li> </ul>"},{"location":"_tags/#tag:python","title":"python","text":"<ul> <li>            Ananke          </li> <li>            Moirai          </li> </ul>"},{"location":"_tags/#tag:svelte","title":"svelte","text":"<ul> <li>            Ananke          </li> </ul>"},{"location":"_tags/#tag:wip","title":"wip","text":"<ul> <li>            Ananke          </li> <li>            Moirai          </li> </ul>"},{"location":"CLI/fc-json/","title":"Fc json","text":"<p> Repository |  Releases</p>","tags":["cpp","beta"]},{"location":"CLI/fc-json/#fc-json","title":"fc-json","text":"","tags":["cpp","beta"]},{"location":"CLI/fc-json/#introduction","title":"Introduction","text":"<p>You know when someone sends you a json file and ask you to create schemas for your application? Well, this is the solution. fc-json accepts a json file as input, and generates the schemas for you. just save the output in your project and use it as regularly.</p>","tags":["cpp","beta"]},{"location":"CLI/fc-json/#usage","title":"Usage","text":"<pre><code>fc-json myFile.json\n# OR\nfc-json myFile.json &gt; schemas.py\n</code></pre> myFile.jsonOutput <pre><code>{\n    \"myString\": \"hello world\",\n    \"myNumber\": 123.456,\n    \"myObject\": {\n        \"innerString\": \"hello\",\n        \"innerNumber\": 3.1415\n    }\n}\n</code></pre> <pre><code>from typing import Union\nfrom pydantic import BaseModel\n\nclass Root_myObjectSchema(BaseModel):\n    innerString: str\n    innerNumber: float\n\nclass RootSchema(BaseModel):\n    myString: str\n    myNumber: float\n    myObject: Root_myObjectSchema\n</code></pre> <p>Note</p> <p>myFile.json need to be a valid json</p> <p>The root of the file will be called Root, and when creating the names of the schemas, you will get a full path, separated by underscores, with the suffix Schema attached to it.</p> <p>Although this is probably not the name you will use at the end, this prevents (in most cases) duplication of schema names. This way, you only need to remember two things:</p> <ol> <li>You can safely rename the schemas, with not fear of duplicating it.</li> <li>you can test it right away, importing the RootSchema, which will never change.</li> </ol> <p>the RootSchema being the initial name should be default in all schemas, changing only the casing. In python PascalCase is being used, but it will vary based on the language.</p>","tags":["cpp","beta"]},{"location":"CLI/fc-json/#limitation-on-beta","title":"Limitation on beta","text":"<p>This tool is not 100% production ready. For now, it only generates pydantic schemas. There are issues open to improve this tool, and expand it to different languages.</p> <p>In the foreseeable future, I plan to add a python dataclass schema and a C# schema. Other languages may be added by request.</p> <p>the flags were commented out, since only one option is functional, but They will be activated and used in the future. the regular usage will change.</p> <p>Although the schemas layouts are being implemented manually, There is a thought in my head on how to make it generic and allow it to generate based on passed schemas. But this is just I thought for now. Don't get your hopes up. Or do, and help me implement.</p>","tags":["cpp","beta"]},{"location":"CLI/fc-json/#testing","title":"Testing","text":"<p>In the current state, there is no automated testing. Or test cases. Or any test suite. I am testing manually, and things may not work in cases I don't actually tried before.</p> <p>In the projecet you can see the sample file I am using to test.</p>","tags":["cpp","beta"]},{"location":"CLI/fc-json/#documentation","title":"Documentation","text":"<p>It is also a work in progress, since I don't have anything ready yet. Feel free to contribute</p>","tags":["cpp","beta"]},{"location":"Docker/ananke/","title":"Ananke","text":"<p> Repository |</p>","tags":["wip","python","svelte"]},{"location":"Docker/ananke/#ananke","title":"Ananke","text":"","tags":["wip","python","svelte"]},{"location":"Docker/ananke/#introduction","title":"Introduction","text":"<p>Bug</p> <p>This Application is still in development and is not ready to be used</p> <p>Ananke was created as a result of many years of struggling to keep track of changes in external libraries, sdk updates, cloud sdk releases with breaking changes, etc...</p> <p>The idea of ananke is to keep track of all the tools and frameworks that a developer use. A pipeline broke cause azure changed their CLI? You will have the breaking change warning.</p>","tags":["wip","python","svelte"]},{"location":"Docker/ananke/#how-to-run","title":"How to run","text":"<p>WIP This is not working yet. Do not try to use it</p> <p>A simple docker run has to be enough to have it working. Does it have login? No. It is meant to run on your machine,as a helper application.</p> <p>Maybe this could change in the future? </p> <p>This project separates the back and frontend, but it can always run together. To the user, both work as one.</p>","tags":["wip","python","svelte"]},{"location":"Docker/ananke/#frontend-application","title":"Frontend application","text":"<p>This is where you will spend most of the time. this application starts witha dashboard that contains a calendar with the important events that happened. This could include not only sdk releases, but results from jobs as well.</p> <p>The meat of this app is the job editor, where in a blueprint style you can automate your work. Then you set up this job to run on a scheduler.</p>","tags":["wip","python","svelte"]},{"location":"Docker/ananke/#backend-application","title":"Backend application","text":"<p>Danger</p> <p>You probably will never need to go into this part unless you want to improve, extend or understand the full application</p> <p>Backend is a composition of 3 main things: - API with DB connection - Scheduler - Job Engine (moirai)</p> <p>Those 3 things work together to make the system work. The API itself will control the regular tasks from the frontend: Settings, crud for tasks and jobs. It will also forward the actions to/from the scheduler like start, stop, add, remove jobs to the scheduler.</p> <p>The scheduler is responsible for calling retreiving the tasks and passing it to engine. The results of the task should be logged as well.</p> <p>Lastly the engine will process the job file, calling the programs and performing tasks as described in the jobfile.</p> <p>The engine itself is called moirai, a python library created to process the tasks. You can see more of it here.</p>","tags":["wip","python","svelte"]},{"location":"Libraries/fc.tui-core/","title":"Fc.tui core","text":"<p> Repository |  Releases</p>","tags":["csharp"]},{"location":"Libraries/fc.tui-core/#fctui-core","title":"fc.tui-core","text":"<p>Warning</p> <p>This library is deprecated</p> <p>Tui is a C# Command library to build simple interfaces. The main goal is to have a library that works out-of-the-box, don't require any external library, and works in any console. For this reason, the windows and panels are made with ASCII characters. The default behavior can, of course, be modified by the user.</p> <p>The usage instructions can be found in the repository README.md file. It is worth noting that This library is now deprecated, because C# is not being used constantly by me. it should, however be compatible with any .net core application, since there is nothings external being used. Unless microsoft changes the behavior of built-in console libraries, like console.writeln(), it should be compatible with everything.</p>","tags":["csharp"]},{"location":"Libraries/moirai/","title":"Moirai","text":"<p> Repository |</p>","tags":["wip","python"]},{"location":"Libraries/moirai/#moirai","title":"moirai","text":"<p>Bug</p> <p>This Library is under active development and is not ready to use.</p> <p>Moirai is the engine that powers ananke.</p>","tags":["wip","python"]}]}